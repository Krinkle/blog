<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://šime.eu/">
  <title>Šime’s blog</title>
  <subtitle>I’m interested in HTML, CSS, and making the web less annoying</subtitle>
  <link href="https://xn--ime-zza.eu/feed.xml" rel="self"/>
  <link href="https://šime.eu/"/>
  <updated>2024-02-26T00:00:00Z</updated>
  <id>https://šime.eu/</id>
  <author>
    <name>Šime Vidas</name>
  </author>
  <entry>
    <title>Why I use Firefox</title>
    <link href="https://xn--ime-zza.eu/3/"/>
    <updated>2024-02-26T00:00:00Z</updated>
    <id>https://xn--ime-zza.eu/3/</id>
    <content xml:lang="en" type="html">&lt;p&gt;Questions like “Which browser should I use?” regularly come up on the &lt;a href=&quot;https://www.reddit.com/r/browsers/&quot;&gt;r/browsers subreddit&lt;/a&gt;. I sometimes respond to these posts, but my quick replies usually only contain one or two points. To be honest, until recently I wasn’t even sure myself why I use Firefox. Of course it’s a pretty good browser, but that doesn’t explain why I’ve stubbornly stayed loyal to Firefox for more than a decade. After giving it a bit more thought, I came up with the following reasons.&lt;/p&gt;
&lt;h2&gt;1. The &lt;em&gt;about:config&lt;/em&gt; page&lt;/h2&gt;
&lt;p&gt;In Firefox, there is an internal &lt;em&gt;about:config&lt;/em&gt; page with thousands (tens of thousands?) of individual configs that can be freely edited by the user. If you don’t like a particular UI element or behavior in Firefox, there’s a good chance that you can change it with a config. The &lt;em&gt;about:config&lt;/em&gt; page is also used to individually enable experimental web platform features (without requiring a browser restart like in Chrome).&lt;/p&gt;
&lt;p&gt;Here are some of the configs that I’ve edited or added:&lt;/p&gt;
&lt;dt&gt;devtools.toolbox.zoomValue = 1.2&lt;/dt&gt;
&lt;dd&gt;increases the default text size in Firefox devtools to 120%&lt;/dd&gt;
&lt;dt&gt;browser.tabs.closeWindowWithLastTab = false&lt;/dt&gt;
&lt;dd&gt;prevents the entire browser window from closing when the user closes the last tab (I find this behavior annoying)&lt;/dd&gt;
&lt;dt&gt;devtools.inspector.showUserAgentStyles = true&lt;/dt&gt;
&lt;dd&gt;shows user-agent styles in the CSS Rules pane in Firefox devtools (why are user-agent styles hidden by default?)&lt;/dd&gt;
&lt;dt&gt;browser.chrome.guess_favicon = false&lt;/dt&gt;
&lt;dd&gt;stops Firefox from attempting to load the website’s favicon from the default location when an icon is &lt;i&gt;not&lt;/i&gt; declared in the HTML document (I use this config to get rid of the distracting ”favicon not found” errors in the devtools console)&lt;/dd&gt;
&lt;dt&gt;browser.urlbar.resultMenu.keyboard&amp;shy;Accessible = false&lt;/dt&gt;
&lt;dd&gt;removes menu buttons from the individual items in the URL bar dropdown list (those buttons make tabbing through the items slower)&lt;/dd&gt;
&lt;h2&gt;2. Mozilla cannot decrypt my data on their servers&lt;/h2&gt;
&lt;p&gt;All the major browsers have a feature for syncing the user’s browsing data across devices (Firefox Sync, Chrome Sync, Apple iCloud, and so on). The user’s data is stored on the browser vendor’s servers, and this data is of course encrypted. But can the browser vendor decrypt this data? Google can. Apple claims that they can’t, but they have disclosed user data to law enforcement in the past, so I don’t trust them. Mozilla says that they can’t, and I trust them.&lt;/p&gt;
&lt;p&gt;It seems that Mozilla goes out of their way to make absolutely sure that they can’t access the synced browsing data of Firefox users. The encryption is strong enough that with current technology it would take trillions of years to break into this data, so it’s pretty safe. However, if I somehow managed to lose all my devices where I’ve activated Firefox Sync, my browsing data on Mozilla’s servers would be lost forever; there would be no way of recovering it. Still, I like the idea of using a browser from a company that does not &lt;em&gt;want&lt;/em&gt; to access my data on their own servers. I feel like this is how it should be.&lt;/p&gt;
&lt;h2&gt;3. Translating web pages is also completely private&lt;/h2&gt;
&lt;p&gt;Firefox Translations is a relatively new feature that allows users to translate web pages to a different language (from a small set of supported languages) directly in the browser, without sending any data to any servers. This feature is based on machine learning and neural networks.&lt;/p&gt;
&lt;p&gt;This is another example of Mozilla going the extra mile to protect the user’s privacy.&lt;/p&gt;
&lt;h2&gt;4. Mozilla develops their own browser engine&lt;/h2&gt;
&lt;p&gt;Firefox uses Mozilla’s Gecko browser engine. No other major browser uses Gecko. The web is my favorite platform, and since a diversity of browser engines is good for the web*, I want to support Gecko. By using Firefox and reporting Firefox and web compat bugs, I’m doing my part.&lt;/p&gt;
&lt;p&gt;*Allow me to quote &lt;a href=&quot;https://www.chromium.org/blink/developer-faq/#hold-up-isnt-more-browsers-sharing-webkit-better-for-compatibility&quot;&gt;Google’s F.A.Q.&lt;/a&gt; from 2013 when they forked WebKit:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3&gt;Hold up, isn&#39;t more browsers sharing WebKit better for compatibility?&lt;/h3&gt;
&lt;p&gt;It&#39;s important to remember that WebKit is already not a homogenous target for developers. For example, features like WebGL and IndexedDB are only supported in some WebKit-based browsers. Understanding WebKit for Developers helps explain the details, like why &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;, fonts and 3D transforms implementations vary across WebKit browsers.&lt;/p&gt;
&lt;p&gt;Today Firefox uses the Gecko engine, which isn’t based on WebKit, yet the two have a high level of compatibility. We’re adopting a similar approach to Mozilla by having a distinct yet compatible open-source engine. We will also continue to have open bug tracking and implementation status so you can see and contribute to what we’re working on at any time.&lt;/p&gt;
&lt;p&gt;From a short-term perspective, monocultures seem good for developer productivity. &lt;mark&gt;From the long-term perspective, however, monocultures inevitably lead to stagnation. It is our firm belief that more options in rendering engines will lead to more innovation and a healthier web ecosystem.&lt;/mark&gt;&lt;/p&gt;
&lt;h3&gt;How does this affect web standards?&lt;/h3&gt;
&lt;p&gt;Bringing a new browser engine into the world increases diversity. Though that in itself isn&#39;t our goal, it has the beneficial effect of ensuring that multiple interoperable implementations of accepted standards exist. &lt;mark&gt;Each engine will approach the same problem from a different direction, meaning that web developers can be more confident in the performance and security characteristics of the end result. It also makes it less likely that one implementation&#39;s quirks become de facto standards, which is good for the open web at large.&lt;/mark&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I couldn’t have said it better. We currently have three major browser engines—and a couple of smaller ones in development—and of those three, Gecko is the only one that may be at risk. I’m not sure what Gecko’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Conservation_status&quot;&gt;conservation status&lt;/a&gt; would be if it were a real animal (probably “Conservation Dependent”), but I don&#39;t plan on giving up on it anytime soon.&lt;/p&gt;
&lt;h2&gt;5. The best support for extensions on Android&lt;/h2&gt;
&lt;p&gt;The web has unfortunately become slower and more annoying over the past decade. Extensions that block ads and other types of problematic content have become necessary to have a normal web browsing experience. On Android, Firefox has by far the best support for browser extensions. This includes uBlock Origin (the best ad-blocker) and extensions for adding user styles and user scripts to websites. I actively use all of these extensions (uBlock Origin, &lt;a href=&quot;https://add0n.com/stylus.html&quot;&gt;Stylus&lt;/a&gt;, Tampermonkey) on desktop to tweak websites to my liking. It is awesome that Firefox users on Android can do the same.&lt;/p&gt;
&lt;h2&gt;6. A great picture-in-picture player&lt;/h2&gt;
&lt;p&gt;I should probably finally mention an actual feature in Firefox that a regular user might find useful. I don’t really use Firefox for its general features, but if there’s one such feature that I really like, it’s the native picture-in-picture video player in desktop Firefox, which is superb. It has everything that one could ask for. It can be quickly opened via an overlay button that is shown when hovering any video. It can be resized and positioned anywhere on the screen. It has the full controls, including pause, mute, and the seek bar for skipping to any point in the video. I use it all the time.&lt;/p&gt;
&lt;h2&gt;In summary&lt;/h2&gt;
&lt;p&gt;I trust Mozilla more than I trust Google, Apple, Microsoft, or any other company that makes web browsers. This trust is based on the fact that Mozilla chooses the highest level of user privacy when developing services such as Firefox Sync, Firefox Translate, and others. A web browser is an integral part of a person’s online life, so it makes sense to choose a browser from a company that one trusts the most.&lt;/p&gt;
&lt;p&gt;In addition to that, Firefox offers the highest level of customization, whether it’s through browser extensions or internal configs. This is important to me because I prefer websites over native apps.&lt;/p&gt;
&lt;p&gt;Any great feature, such as the picture-in-picture player, is just the cherry on top. I understand that for most people it’s probably the other way around. They care about features more than they care about privacy and customization. That is fine. There is no wrong answer. Everyone should use the browser that serves them best.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>24 seconds to view the product images on Amazon’s website</title>
    <link href="https://xn--ime-zza.eu/2/"/>
    <updated>2024-01-31T00:00:00Z</updated>
    <id>https://xn--ime-zza.eu/2/</id>
    <content xml:lang="en" type="html">&lt;p&gt;Earlier this month I finally retired my Motorola G4 that served me well for testing web performance for over half a decade. The new device that I got is the Nokia C02 (&lt;a href=&quot;https://www.gsmarena.com/nokia_c02-12136.php&quot;&gt;view specs&lt;/a&gt;). In terms of CPU and RAM, it’s the lowest-end Android smartphone I could find that was released by a mainstream brand in 2023. According to &lt;a href=&quot;https://browserbench.org/&quot;&gt;Speedometer&lt;/a&gt;, it’s about 25% slower than the 2016 Motorola G4. Yes, slower.&lt;/p&gt;
&lt;p&gt;Did I go too low? I don’t think so. Around 4 billion people browse the web using smartphones. If we were to sort these 4 billion smartphones by web performance, the Nokia C02 would probably not be in the bottom 5%, and maybe not even in the bottom 10% (I’m just guessing). So when a website is too slow on my Nokia, then it’s too slow for probably at least &lt;strong&gt;a few hundred million people&lt;/strong&gt;, and that’s unacceptable.&lt;/p&gt;
&lt;p&gt;When I saw a post on my Mastodon timeline about the poor performance of Amazon’s website, and the dangers of not testing on real devices, I had to see for myself. I loaded the product page for some vase on my Nokia, and at first everything seemed more or less fine. The page rendered within a couple of seconds, and there was no major scroll jank. The experience was acceptable.&lt;/p&gt;
&lt;p&gt;I was about to end the test and conclude that it’s not as bad as the performance profile made it out to be, but then I tried to view the other product images. The first two images rendered immediately, but none of the other images had loaded. So I waited. And waited. I imagined that some JavaScript error might have caused the loading spinner to get stuck. I put the phone down and returned to my laptop because modern technology has ruined my attention span, and I can’t just gaze at a loading screen for more than 10 seconds without any progress. Another 10 seconds later, the image finally appeared.&lt;/p&gt;
&lt;figure&gt;
  &lt;video controls=&quot;&quot; src=&quot;https://xn--ime-zza.eu/media/amazon-24-seconds.mp4&quot;&gt;&lt;/video&gt;
  &lt;figcaption&gt;Tested in Chrome on a 34 Mbps connection.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I repeated the test a few more times across different product pages to confirm that it wasn’t just a fluke. Overall, it takes about 24 seconds from navigation start to product image render. That’s on the Nokia C02. I also performed a site performance test with an “emulated Motorola G4” on WebPageTest. The &lt;a href=&quot;https://www.webpagetest.org/result/240130_AiDcSF_EAG/&quot;&gt;test result&lt;/a&gt; shows about 10 seconds of scripting on the main thread, and the first 30 seconds are riddled with long tasks. According to my browser’s devtools, a typical product page on Amazon’s website executes around 7 MB of JavaScript.&lt;/p&gt;
&lt;p&gt;While this is undoubtedly too much JavaScript (five times more than I would be comfortable with), users on low-end devices can still have a passable experience—at the expense of their device’s battery percentage—as long as they don’t have to wait too long for each individual event. But in this case, waiting 20+ seconds for the product images to load &lt;em&gt;is&lt;/em&gt; too long.&lt;/p&gt;
&lt;p&gt;Since the first two product images load immediately, it could be that Amazon decided to eagerly load only those two images because they determined that by the time the user swipes to the third image, most if not all of the JavaScript has already been executed anyway, so there’s only a small delay. Amazon’s test devices must be more powerful than my Nokia. Amazon should consider eagerly loading &lt;em&gt;all&lt;/em&gt; product images. After all, viewing these images is one of the first things the user does after checking the price, isn’t it? If that’s not possible, Amazon could probably reduce the image loading delay by prioritizing the JavaScript that is responsible for loading the images, and making sure that the images can load faster if needed, without being delayed by other resources.&lt;/p&gt;
&lt;p&gt;But those are just my surface-level thoughts. I don’t have the whole picture. I’m sure Amazon knows how to fix this issue, assuming that it can be fixed without a major overhaul of the code. The only question is whether they consider this issue to be important enough to be prioritized. In the meantime, I’ll stick to my admittedly simplistic rule: If it’s too slow on my Nokia, it’s unacceptable.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Websites shouldn’t reject passwords generated by browsers</title>
    <link href="https://xn--ime-zza.eu/1/"/>
    <updated>2024-01-28T00:00:00Z</updated>
    <id>https://xn--ime-zza.eu/1/</id>
    <content xml:lang="en" type="html">&lt;p&gt;When I decided to get the domain šime.eu for my blog, I had to find a domain name registrar that supports .eu domains. My first choice was &lt;a href=&quot;https://www.netim.com/&quot;&gt;Netim&lt;/a&gt; (I forgot why). I added my order for šime.eu to the cart, and the next step was to create an account. My browser, Firefox, offered to generate a secure password, which I of course accepted, but when I tried to submit the form, the website showed the error message “The password provided is invalid”.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://xn--ime-zza.eu/media/firefox-password-invalid.jpg&quot; width=&quot;1772&quot; height=&quot;997&quot; alt=&quot;Netim. Create your account. Your password should have at least one symbol. The password provided is invalid.&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;I was confused. According to the tooltip, the password meets all the requirements. It even says that it’s a strong password. So what’s the problem? I didn’t have the patience to figure out the reason, but it turns out that when Netim says “at least one symbol”, they don’t mean any symbol; they mean one of the 13 supported symbols that are listed in the tooltip. I’ll leave it to you to figure out which symbol in the password generated by Firefox is not supported. What a fun game, huh?&lt;/p&gt;
&lt;p&gt;I &lt;a href=&quot;https://twitter.com/simevidas/status/1749548143975248010&quot;&gt;reported&lt;/a&gt; this issue to Netim, and they said that they asked their dev team to add more characters to the list. They should probably test their account creation form in every major browser, since different browsers use different algorithms for generating secure passwords. If I were an expert in this field, I could give you better advice on exactly which symbols to support (all of them?), but one thing seems clear to me: Websites should not reject passwords generated by browsers.&lt;/p&gt;
</content>
  </entry>
</feed>